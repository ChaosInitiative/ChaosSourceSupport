/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.enderzombi102.css.lang.squirrel.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.enderzombi102.css.lang.squirrel.psi.SquirrelElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_SquirrelLexer.flex</tt>
 */
public class _SquirrelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\52\1\21\2\0\1\60\1\54\1\14\1\67\1\70\1\5\1\57"+
    "\1\71\1\20\1\15\1\4\1\10\7\13\2\7\1\72\1\73\1\55\1\53\1\56\1\74\1\23\4\12"+
    "\1\17\1\12\24\6\1\65\1\22\1\66\1\61\1\6\1\0\1\27\1\24\1\31\1\42\1\26\1\43"+
    "\1\44\1\34\1\40\1\6\1\30\1\35\1\45\1\37\1\36\1\50\1\6\1\25\1\32\1\33\1\41"+
    "\1\51\1\46\1\11\1\47\1\6\1\63\1\16\1\64\1\62\6\0\1\1\32\0\1\3\337\0\1\3\177"+
    "\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\1\17\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\40\2\0\1\6\3\0"+
    "\1\41\1\42\1\43\1\0\1\44\1\0\1\45\16\5"+
    "\1\46\1\47\1\5\1\50\6\5\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\0\1\65\1\0\2\6\1\66\1\0\1\67"+
    "\14\5\1\70\10\5\1\71\5\5\1\72\1\73\1\0"+
    "\4\5\1\74\1\75\1\76\7\5\1\77\2\5\1\100"+
    "\11\5\1\101\3\5\1\102\1\103\1\104\1\105\2\5"+
    "\1\106\1\5\1\107\6\5\1\110\1\111\1\5\1\112"+
    "\1\113\1\114\2\5\1\115\1\116\1\5\1\117\4\5"+
    "\1\120\1\121\3\5\1\122\1\123\1\5\1\124\1\5"+
    "\1\125\1\126\1\5\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\u0894\0\75\0\75"+
    "\0\u08d1\0\u090e\0\75\0\75\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\75\0\75\0\75\0\u02dc\0\75\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0131\0\u0ec6\0\u0131\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u1071\0\75\0\75\0\75\0\75\0\u10ae\0\u10eb\0\u1128"+
    "\0\u0a02\0\75\0\75\0\u0af6\0\u0af6\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u0131\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\75\0\u090e\0\u10eb\0\u1797\0\u17d4\0\u1811\0\u184e\0\u0131"+
    "\0\u0131\0\u0131\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc"+
    "\0\u19f9\0\u0131\0\u1a36\0\u1a73\0\u0131\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u0131\0\u1cd5"+
    "\0\u1d12\0\u1d4f\0\u0131\0\u0131\0\u0131\0\u0131\0\u1d8c\0\u1dc9"+
    "\0\u0131\0\u1e06\0\u0131\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u0131\0\u0131\0\u1fb1\0\u0131\0\u0131\0\u0131\0\u1fee"+
    "\0\u202b\0\u0131\0\u0131\0\u2068\0\u0131\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u0131\0\u0131\0\u2199\0\u21d6\0\u2213\0\u0131\0\u0131"+
    "\0\u2250\0\u0131\0\u228d\0\u0131\0\u0131\0\u22ca\0\u0131";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\2\6"+
    "\1\7\1\11\1\12\1\13\1\6\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\2\6\1\22\1\23\1\24"+
    "\1\6\1\25\1\6\1\26\1\27\1\6\1\30\1\31"+
    "\2\6\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\76\0\3\3\75\0\1\61\1\62\45\0\1\63\74\0"+
    "\1\64\27\0\6\6\3\0\1\6\4\0\26\6\32\0"+
    "\2\7\2\0\1\7\1\0\1\65\66\0\1\66\1\67"+
    "\1\70\1\0\1\67\1\0\1\65\57\0\1\71\2\0"+
    "\72\71\15\0\1\72\75\0\1\73\76\0\1\74\32\0"+
    "\1\75\21\0\21\76\1\77\1\100\52\76\21\0\1\101"+
    "\61\0\6\6\3\0\1\6\4\0\1\6\1\102\24\6"+
    "\31\0\6\6\3\0\1\6\4\0\2\6\1\103\23\6"+
    "\31\0\3\6\1\104\2\6\3\0\1\6\4\0\11\6"+
    "\1\105\1\6\1\106\12\6\31\0\6\6\3\0\1\6"+
    "\4\0\3\6\1\107\5\6\1\110\1\111\13\6\31\0"+
    "\6\6\3\0\1\6\4\0\22\6\1\112\3\6\31\0"+
    "\6\6\3\0\1\6\4\0\1\6\1\113\6\6\1\114"+
    "\12\6\1\115\2\6\31\0\6\6\3\0\1\6\4\0"+
    "\12\6\1\116\13\6\31\0\6\6\3\0\1\6\4\0"+
    "\15\6\1\117\10\6\31\0\6\6\3\0\1\6\4\0"+
    "\13\6\1\120\3\6\1\121\6\6\31\0\6\6\3\0"+
    "\1\6\4\0\2\6\1\122\7\6\1\123\13\6\31\0"+
    "\6\6\3\0\1\6\4\0\12\6\1\124\2\6\1\125"+
    "\10\6\31\0\6\6\3\0\1\6\4\0\10\6\1\126"+
    "\15\6\31\0\6\6\3\0\1\6\4\0\14\6\1\127"+
    "\11\6\31\0\6\6\3\0\1\6\4\0\3\6\1\130"+
    "\22\6\31\0\6\6\3\0\1\6\4\0\3\6\1\131"+
    "\22\6\76\0\1\132\74\0\1\133\75\0\1\134\40\0"+
    "\1\135\32\0\1\136\1\0\1\137\72\0\1\140\2\0"+
    "\1\141\71\0\1\142\3\0\1\143\70\0\1\144\113\0"+
    "\1\145\2\0\1\61\2\0\72\61\1\62\1\0\3\62"+
    "\1\146\67\62\7\0\2\147\2\0\1\147\2\0\2\150"+
    "\6\0\1\150\55\0\2\66\2\0\1\66\1\0\1\65"+
    "\66\0\1\66\1\67\2\0\1\67\1\0\1\65\66\0"+
    "\2\151\1\0\2\151\3\0\1\151\4\0\1\151\1\0"+
    "\2\151\1\0\1\151\10\0\2\151\45\0\1\152\75\0"+
    "\1\153\57\0\1\76\2\0\72\76\1\154\1\0\17\154"+
    "\1\155\53\154\6\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\156\23\6\31\0\6\6\3\0\1\6\4\0\6\6"+
    "\1\157\1\160\16\6\31\0\6\6\3\0\1\6\4\0"+
    "\7\6\1\161\16\6\31\0\6\6\3\0\1\6\4\0"+
    "\6\6\1\162\17\6\31\0\6\6\3\0\1\6\4\0"+
    "\15\6\1\163\10\6\31\0\6\6\3\0\1\6\4\0"+
    "\6\6\1\164\1\165\16\6\31\0\6\6\3\0\1\6"+
    "\4\0\3\6\1\166\6\6\1\167\13\6\31\0\6\6"+
    "\3\0\1\6\4\0\13\6\1\170\12\6\31\0\6\6"+
    "\3\0\1\6\4\0\14\6\1\171\11\6\31\0\6\6"+
    "\3\0\1\6\4\0\23\6\1\172\2\6\31\0\6\6"+
    "\3\0\1\6\4\0\1\6\1\173\12\6\1\174\11\6"+
    "\31\0\6\6\3\0\1\6\4\0\24\6\1\175\1\6"+
    "\31\0\6\6\3\0\1\6\4\0\5\6\1\176\20\6"+
    "\31\0\6\6\3\0\1\6\4\0\11\6\1\177\14\6"+
    "\31\0\6\6\3\0\1\6\4\0\6\6\1\200\17\6"+
    "\31\0\6\6\3\0\1\6\4\0\11\6\1\201\5\6"+
    "\1\202\6\6\31\0\6\6\3\0\1\6\4\0\1\6"+
    "\1\203\24\6\31\0\6\6\3\0\1\6\4\0\13\6"+
    "\1\204\12\6\31\0\6\6\3\0\1\6\4\0\14\6"+
    "\1\205\11\6\31\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\206\23\6\31\0\6\6\3\0\1\6\4\0\1\6"+
    "\1\207\24\6\31\0\6\6\3\0\1\6\4\0\1\6"+
    "\1\210\24\6\101\0\1\211\16\0\1\62\1\0\2\62"+
    "\1\212\1\146\67\62\7\0\2\147\2\0\1\147\70\0"+
    "\2\147\2\0\1\147\2\0\1\213\1\0\1\213\36\0"+
    "\1\213\23\0\6\6\3\0\1\6\4\0\3\6\1\214"+
    "\22\6\31\0\6\6\3\0\1\6\4\0\15\6\1\215"+
    "\10\6\31\0\6\6\3\0\1\6\4\0\15\6\1\216"+
    "\10\6\31\0\6\6\3\0\1\6\4\0\2\6\1\217"+
    "\23\6\31\0\6\6\3\0\1\6\4\0\2\6\1\220"+
    "\23\6\31\0\6\6\3\0\1\6\4\0\21\6\1\221"+
    "\4\6\31\0\6\6\3\0\1\6\4\0\2\6\1\222"+
    "\23\6\31\0\6\6\3\0\1\6\4\0\5\6\1\223"+
    "\20\6\31\0\6\6\3\0\1\6\4\0\6\6\1\224"+
    "\17\6\31\0\6\6\3\0\1\6\4\0\13\6\1\225"+
    "\12\6\31\0\6\6\3\0\1\6\4\0\6\6\1\226"+
    "\1\227\16\6\31\0\6\6\3\0\1\6\4\0\7\6"+
    "\1\230\16\6\31\0\6\6\3\0\1\6\4\0\12\6"+
    "\1\231\13\6\31\0\6\6\3\0\1\6\4\0\6\6"+
    "\1\232\17\6\31\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\233\23\6\31\0\6\6\3\0\1\6\4\0\3\6"+
    "\1\234\22\6\31\0\6\6\3\0\1\6\4\0\11\6"+
    "\1\235\14\6\31\0\6\6\3\0\1\6\4\0\7\6"+
    "\1\236\16\6\31\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\237\23\6\31\0\6\6\3\0\1\6\4\0\3\6"+
    "\1\240\22\6\31\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\241\23\6\31\0\6\6\3\0\1\6\4\0\5\6"+
    "\1\242\20\6\31\0\6\6\3\0\1\6\4\0\11\6"+
    "\1\243\14\6\31\0\6\6\3\0\1\6\4\0\11\6"+
    "\1\244\14\6\31\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\245\23\6\31\0\6\6\3\0\1\6\4\0\20\6"+
    "\1\246\5\6\31\0\6\6\3\0\1\6\4\0\4\6"+
    "\1\247\21\6\31\0\6\6\3\0\1\6\4\0\21\6"+
    "\1\250\4\6\31\0\6\6\3\0\1\6\4\0\1\6"+
    "\1\251\24\6\31\0\6\6\3\0\1\6\4\0\13\6"+
    "\1\252\12\6\31\0\6\6\3\0\1\6\4\0\10\6"+
    "\1\253\15\6\31\0\6\6\3\0\1\6\4\0\6\6"+
    "\1\254\17\6\31\0\6\6\3\0\1\6\4\0\2\6"+
    "\1\255\23\6\31\0\6\6\3\0\1\6\4\0\7\6"+
    "\1\256\16\6\31\0\6\6\3\0\1\6\4\0\14\6"+
    "\1\257\11\6\31\0\6\6\3\0\1\6\4\0\5\6"+
    "\1\260\20\6\31\0\6\6\3\0\1\6\4\0\22\6"+
    "\1\261\3\6\31\0\6\6\3\0\1\6\4\0\12\6"+
    "\1\262\13\6\31\0\6\6\3\0\1\6\4\0\11\6"+
    "\1\263\14\6\31\0\6\6\3\0\1\6\4\0\3\6"+
    "\1\264\22\6\31\0\6\6\3\0\1\6\4\0\7\6"+
    "\1\265\10\6\1\266\5\6\31\0\6\6\3\0\1\6"+
    "\4\0\15\6\1\267\10\6\31\0\6\6\3\0\1\6"+
    "\4\0\3\6\1\270\22\6\31\0\6\6\3\0\1\6"+
    "\4\0\7\6\1\271\16\6\31\0\6\6\3\0\1\6"+
    "\4\0\2\6\1\272\23\6\31\0\6\6\3\0\1\6"+
    "\4\0\16\6\1\273\7\6\31\0\6\6\3\0\1\6"+
    "\4\0\13\6\1\274\12\6\31\0\6\6\3\0\1\6"+
    "\4\0\5\6\1\275\20\6\31\0\6\6\3\0\1\6"+
    "\4\0\2\6\1\276\23\6\31\0\6\6\3\0\1\6"+
    "\4\0\13\6\1\277\12\6\31\0\6\6\3\0\1\6"+
    "\4\0\16\6\1\300\7\6\31\0\6\6\3\0\1\6"+
    "\4\0\13\6\1\301\12\6\31\0\6\6\3\0\1\6"+
    "\4\0\10\6\1\302\15\6\31\0\6\6\3\0\1\6"+
    "\4\0\17\6\1\303\6\6\31\0\6\6\3\0\1\6"+
    "\4\0\13\6\1\304\12\6\31\0\6\6\3\0\1\6"+
    "\4\0\2\6\1\305\23\6\31\0\6\6\3\0\1\6"+
    "\4\0\3\6\1\306\22\6\31\0\6\6\3\0\1\6"+
    "\4\0\11\6\1\307\14\6\31\0\6\6\3\0\1\6"+
    "\4\0\5\6\1\310\20\6\31\0\6\6\3\0\1\6"+
    "\4\0\14\6\1\311\11\6\31\0\6\6\3\0\1\6"+
    "\4\0\7\6\1\312\16\6\31\0\6\6\3\0\1\6"+
    "\4\0\6\6\1\313\17\6\31\0\6\6\3\0\1\6"+
    "\4\0\15\6\1\314\10\6\31\0\6\6\3\0\1\6"+
    "\4\0\5\6\1\315\20\6\31\0\6\6\3\0\1\6"+
    "\4\0\7\6\1\316\16\6\31\0\6\6\3\0\1\6"+
    "\4\0\7\6\1\317\16\6\31\0\6\6\3\0\1\6"+
    "\4\0\10\6\1\320\15\6\31\0\6\6\3\0\1\6"+
    "\4\0\12\6\1\321\13\6\31\0\6\6\3\0\1\6"+
    "\4\0\2\6\1\322\23\6\31\0\6\6\3\0\1\6"+
    "\4\0\2\6\1\323\23\6\31\0\6\6\3\0\1\6"+
    "\4\0\2\6\1\324\23\6\31\0\6\6\3\0\1\6"+
    "\4\0\13\6\1\325\12\6\31\0\6\6\3\0\1\6"+
    "\4\0\12\6\1\326\13\6\31\0\6\6\3\0\1\6"+
    "\4\0\17\6\1\327\6\6\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8967];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\42\1\11\11\1\1\2\11\1\1\1\0"+
    "\2\11\2\0\1\1\3\0\3\11\1\0\1\11\1\0"+
    "\31\1\7\11\1\1\4\11\1\0\1\1\1\0\1\1"+
    "\2\11\1\0\34\1\1\11\1\1\1\0\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SquirrelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SquirrelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 88: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 3: 
            { return T_QUOTIENT;
            } 
            // fall through
          case 90: break;
          case 4: 
            { return T_MUL;
            } 
            // fall through
          case 91: break;
          case 5: 
            { return T_IDENT;
            } 
            // fall through
          case 92: break;
          case 6: 
            { return T_INTEGER;
            } 
            // fall through
          case 93: break;
          case 7: 
            { return T_DOT;
            } 
            // fall through
          case 94: break;
          case 8: 
            { return T_BIT_OR;
            } 
            // fall through
          case 95: break;
          case 9: 
            { return T_MINUS;
            } 
            // fall through
          case 96: break;
          case 10: 
            { return T_DQUOTE;
            } 
            // fall through
          case 97: break;
          case 11: 
            { return T_NOT;
            } 
            // fall through
          case 98: break;
          case 12: 
            { return T_ASSIGN;
            } 
            // fall through
          case 99: break;
          case 13: 
            { return T_BIT_AND;
            } 
            // fall through
          case 100: break;
          case 14: 
            { return T_LESS;
            } 
            // fall through
          case 101: break;
          case 15: 
            { return T_GREATER;
            } 
            // fall through
          case 102: break;
          case 16: 
            { return T_PLUS;
            } 
            // fall through
          case 103: break;
          case 17: 
            { return T_REMAINDER;
            } 
            // fall through
          case 104: break;
          case 18: 
            { return T_BIT_XOR;
            } 
            // fall through
          case 105: break;
          case 19: 
            { return T_TILDE;
            } 
            // fall through
          case 106: break;
          case 20: 
            { return T_LBRACE;
            } 
            // fall through
          case 107: break;
          case 21: 
            { return T_RBRACE;
            } 
            // fall through
          case 108: break;
          case 22: 
            { return T_LBRACK;
            } 
            // fall through
          case 109: break;
          case 23: 
            { return T_RBRACK;
            } 
            // fall through
          case 110: break;
          case 24: 
            { return T_LPAREN;
            } 
            // fall through
          case 111: break;
          case 25: 
            { return T_RPAREN;
            } 
            // fall through
          case 112: break;
          case 26: 
            { return T_COMMA;
            } 
            // fall through
          case 113: break;
          case 27: 
            { return T_COLON;
            } 
            // fall through
          case 114: break;
          case 28: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 115: break;
          case 29: 
            { return T_QUESTION;
            } 
            // fall through
          case 116: break;
          case 30: 
            { return T_LINE_COMMENT;
            } 
            // fall through
          case 117: break;
          case 31: 
            { return T_QUOTIENT_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 32: 
            { return T_MUL_ASSIGN;
            } 
            // fall through
          case 119: break;
          case 33: 
            { return T_COND_OR;
            } 
            // fall through
          case 120: break;
          case 34: 
            { return T_MINUS_MINUS;
            } 
            // fall through
          case 121: break;
          case 35: 
            { return T_MINUS_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 36: 
            { return T_STRING;
            } 
            // fall through
          case 123: break;
          case 37: 
            { return T_AT_DQUOTE;
            } 
            // fall through
          case 124: break;
          case 38: 
            { return T_IN;
            } 
            // fall through
          case 125: break;
          case 39: 
            { return T_IF;
            } 
            // fall through
          case 126: break;
          case 40: 
            { return T_DO;
            } 
            // fall through
          case 127: break;
          case 41: 
            { return T_NOT_EQ;
            } 
            // fall through
          case 128: break;
          case 42: 
            { return T_EQ;
            } 
            // fall through
          case 129: break;
          case 43: 
            { return T_COND_AND;
            } 
            // fall through
          case 130: break;
          case 44: 
            { return T_SEND_CHANNEL;
            } 
            // fall through
          case 131: break;
          case 45: 
            { return T_LESS_OR_EQUAL;
            } 
            // fall through
          case 132: break;
          case 46: 
            { return T_SHIFT_LEFT;
            } 
            // fall through
          case 133: break;
          case 47: 
            { return T_GREATER_OR_EQUAL;
            } 
            // fall through
          case 134: break;
          case 48: 
            { return T_SHIFT_RIGHT;
            } 
            // fall through
          case 135: break;
          case 49: 
            { return T_PLUS_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 50: 
            { return T_PLUS_PLUS;
            } 
            // fall through
          case 137: break;
          case 51: 
            { return T_REMAINDER_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 52: 
            { return T_COLONCOLON;
            } 
            // fall through
          case 139: break;
          case 53: 
            { return T_FLOAT;
            } 
            // fall through
          case 140: break;
          case 54: 
            { return T_DOTDOTDOT;
            } 
            // fall through
          case 141: break;
          case 55: 
            { return T_STRING_BLOCK;
            } 
            // fall through
          case 142: break;
          case 56: 
            { return T_TRY;
            } 
            // fall through
          case 143: break;
          case 57: 
            { return T_FOR;
            } 
            // fall through
          case 144: break;
          case 58: 
            { return T_SHIFT_SHIFT_RIGHT;
            } 
            // fall through
          case 145: break;
          case 59: 
            { return T_BLOCK_COMMENT;
            } 
            // fall through
          case 146: break;
          case 60: 
            { return T_ELSE;
            } 
            // fall through
          case 147: break;
          case 61: 
            { return T_ENUM;
            } 
            // fall through
          case 148: break;
          case 62: 
            { return T_CASE;
            } 
            // fall through
          case 149: break;
          case 63: 
            { return T_THIS;
            } 
            // fall through
          case 150: break;
          case 64: 
            { return T_NULL;
            } 
            // fall through
          case 151: break;
          case 65: 
            { return T_BREAK;
            } 
            // fall through
          case 152: break;
          case 66: 
            { return T_CATCH;
            } 
            // fall through
          case 153: break;
          case 67: 
            { return T_CLASS;
            } 
            // fall through
          case 154: break;
          case 68: 
            { return T_CLONE;
            } 
            // fall through
          case 155: break;
          case 69: 
            { return T_CONST;
            } 
            // fall through
          case 156: break;
          case 70: 
            { return T_THROW;
            } 
            // fall through
          case 157: break;
          case 71: 
            { return T_LOCAL;
            } 
            // fall through
          case 158: break;
          case 72: 
            { return T_WHILE;
            } 
            // fall through
          case 159: break;
          case 73: 
            { return T_YIELD;
            } 
            // fall through
          case 160: break;
          case 74: 
            { return T_VARGC;
            } 
            // fall through
          case 161: break;
          case 75: 
            { return T_RESUME;
            } 
            // fall through
          case 162: break;
          case 76: 
            { return T_RETURN;
            } 
            // fall through
          case 163: break;
          case 77: 
            { return T_SWITCH;
            } 
            // fall through
          case 164: break;
          case 78: 
            { return T_TYPEOF;
            } 
            // fall through
          case 165: break;
          case 79: 
            { return T_DELETE;
            } 
            // fall through
          case 166: break;
          case 80: 
            { return T_PARENT;
            } 
            // fall through
          case 167: break;
          case 81: 
            { return T_EXTENDS;
            } 
            // fall through
          case 168: break;
          case 82: 
            { return T_DEFAULT;
            } 
            // fall through
          case 169: break;
          case 83: 
            { return T_FOREACH;
            } 
            // fall through
          case 170: break;
          case 84: 
            { return T_CONTINUE;
            } 
            // fall through
          case 171: break;
          case 85: 
            { return T_DELEGATE;
            } 
            // fall through
          case 172: break;
          case 86: 
            { return T_FUNCTION;
            } 
            // fall through
          case 173: break;
          case 87: 
            { return T_CONSTRUCTOR;
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
