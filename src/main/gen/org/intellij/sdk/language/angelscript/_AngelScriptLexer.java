/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language.angelscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.sdk.language.angelscript.psi.AngelScriptElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AngelScriptLexer.flex</tt>
 */
public class _AngelScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\67\1\31\1\4\1\0\1\76\1\73\1\27\1\61\1\62\1\12"+
    "\1\70\1\65\1\71\1\26\1\11\1\14\1\47\1\52\1\51\1\53\1\23\1\50\1\23\1\46\1\23"+
    "\1\63\1\64\1\75\1\66\1\77\1\100\1\102\1\25\1\16\1\25\1\16\2\25\10\24\1\20"+
    "\10\24\1\20\2\24\1\57\1\30\1\60\1\74\1\24\1\0\1\36\1\15\1\37\1\21\1\5\1\10"+
    "\1\24\1\42\1\7\1\24\1\44\1\6\1\54\1\32\1\17\1\45\1\24\1\35\1\13\1\34\1\33"+
    "\1\40\1\43\1\22\1\41\1\24\1\55\1\72\1\56\1\101\6\0\1\1\32\0\1\3\337\0\1\3"+
    "\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\4\4\1\5\1\6\1\4"+
    "\1\7\4\4\1\7\1\10\2\1\12\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\3\3\4\1\37\1\40"+
    "\1\41\7\4\1\42\1\0\1\43\1\44\1\45\3\4"+
    "\1\0\1\7\1\0\1\7\3\4\1\46\2\4\1\47"+
    "\1\4\1\0\2\50\2\0\1\51\3\0\1\52\20\4"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\3\5\4"+
    "\1\101\3\4\1\102\3\4\1\0\1\103\3\4\1\7"+
    "\1\104\2\4\1\105\3\4\1\106\1\50\1\107\1\52"+
    "\1\0\4\4\1\110\3\4\1\111\12\4\1\112\1\113"+
    "\1\114\1\115\1\3\1\116\2\4\1\117\2\4\1\120"+
    "\7\4\1\121\1\4\1\122\3\4\1\123\4\4\1\0"+
    "\1\124\1\4\1\125\1\126\3\4\1\127\3\4\1\130"+
    "\1\131\1\4\1\132\5\4\1\133\1\134\2\4\1\135"+
    "\1\4\1\136\1\137\1\140\1\4\1\141\1\142\2\4"+
    "\1\143\3\4\1\144\3\4\1\0\1\4\1\145\6\4"+
    "\1\146\1\147\1\4\1\150\1\151\3\4\1\152\1\134"+
    "\3\4\1\153\2\4\1\154\1\155\1\156\2\4\1\157"+
    "\1\160\1\4\1\161\1\162\1\163\1\4\1\164\10\4"+
    "\1\165\2\4\1\166\1\4\1\167\2\4\1\170\2\4"+
    "\1\171\1\172\1\4\1\173\1\174\1\4\1\175\1\176"+
    "\1\4\1\177\1\200\1\201\1\202";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\u07da\0\103\0\103\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\103\0\103\0\103\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u014f\0\u014f\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\103\0\u0ea8\0\103"+
    "\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\103\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u014f\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\103\0\u1295\0\u12d8\0\u04b6\0\103\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\u1857\0\103"+
    "\0\103\0\103\0\103\0\u189a\0\103\0\103\0\u18dd\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u014f\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\103\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u0fb4\0\u0ff7\0\u1d93\0\u1dd6\0\u014f\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u014f\0\u1252\0\103\0\103\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u014f\0\u2031\0\u2074\0\u20b7\0\u014f"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\103\0\103\0\103\0\u2398\0\u23db\0\u014f"+
    "\0\u241e\0\u2461\0\u014f\0\u24a4\0\u24e7\0\u014f\0\u252a\0\u256d"+
    "\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u014f\0\u26ff\0\u0e65"+
    "\0\u2742\0\u2785\0\u27c8\0\u014f\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u2917\0\u014f\0\u295a\0\u299d\0\u014f\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u014f\0\u2aa9\0\u2aec\0\u2b2f\0\u014f\0\u014f\0\u2b72\0\u014f"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\103\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u014f\0\u2dcd\0\u014f\0\u014f\0\u014f\0\u2e10\0\u014f"+
    "\0\u014f\0\u2e53\0\u2e96\0\u014f\0\u2ed9\0\u2f1c\0\u2f5f\0\u014f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u014f\0\u30f1\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u014f\0\u014f\0\u3283\0\u014f"+
    "\0\u014f\0\u32c6\0\u3309\0\u334c\0\u014f\0\u338f\0\u33d2\0\u3415"+
    "\0\u3458\0\u014f\0\u349b\0\u34de\0\u014f\0\u014f\0\u014f\0\u3521"+
    "\0\u3564\0\u014f\0\u306b\0\u35a7\0\u014f\0\u014f\0\u014f\0\u35ea"+
    "\0\u014f\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u014f\0\u3845\0\u3888\0\u014f\0\u38cb\0\u014f\0\u390e"+
    "\0\u3951\0\u014f\0\u3994\0\u39d7\0\u014f\0\u014f\0\u3a1a\0\u014f"+
    "\0\u014f\0\u3a5d\0\u014f\0\u014f\0\u3aa0\0\u014f\0\u014f\0\u014f"+
    "\0\u014f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\6\1\16\1\6\1\17"+
    "\1\20\1\21\2\6\1\22\1\23\1\2\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\6\1\34"+
    "\1\6\1\35\6\21\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\104\0\3\3\77\0\1\65\2\0\2\65"+
    "\1\66\75\65\5\0\1\6\1\67\2\6\2\0\7\6"+
    "\1\70\3\6\4\0\1\71\22\6\33\0\4\6\2\0"+
    "\13\6\4\0\23\6\33\0\3\6\1\72\2\0\1\73"+
    "\12\6\4\0\1\74\21\6\1\75\33\0\1\6\1\76"+
    "\1\77\1\6\2\0\4\6\1\100\6\6\4\0\1\6"+
    "\1\101\1\6\1\102\1\103\16\6\37\0\1\104\1\105"+
    "\53\0\1\106\26\0\1\107\53\0\1\110\21\0\4\6"+
    "\2\0\13\6\4\0\2\6\1\111\5\6\1\112\1\113"+
    "\11\6\33\0\1\114\2\0\1\115\3\0\1\21\6\116"+
    "\1\21\2\0\1\117\17\0\6\21\34\0\4\6\2\0"+
    "\4\6\1\120\6\6\4\0\3\6\1\121\17\6\33\0"+
    "\4\6\2\0\13\6\4\0\1\6\1\122\1\6\1\123"+
    "\2\6\1\124\14\6\33\0\1\125\3\6\2\0\4\6"+
    "\1\126\6\6\4\0\23\6\33\0\4\6\2\0\4\6"+
    "\1\127\6\6\4\0\23\6\33\0\1\114\2\0\1\115"+
    "\3\0\1\21\6\0\1\21\2\0\1\117\17\0\6\21"+
    "\34\0\1\130\2\0\1\131\3\0\1\132\6\0\1\132"+
    "\2\0\1\133\17\0\6\132\27\0\27\134\1\135\1\136"+
    "\52\134\30\137\1\140\1\141\51\137\5\0\4\6\2\0"+
    "\13\6\4\0\1\6\1\142\2\6\1\143\16\6\33\0"+
    "\2\6\1\144\1\6\2\0\13\6\4\0\23\6\33\0"+
    "\4\6\2\0\13\6\4\0\3\6\1\145\3\6\1\146"+
    "\13\6\33\0\1\147\3\6\2\0\13\6\4\0\23\6"+
    "\33\0\4\6\2\0\2\6\1\150\10\6\4\0\1\151"+
    "\1\152\21\6\33\0\1\6\1\153\2\6\2\0\4\6"+
    "\1\154\6\6\4\0\4\6\1\155\16\6\33\0\4\6"+
    "\2\0\4\6\1\156\6\6\4\0\23\6\33\0\4\6"+
    "\2\0\13\6\4\0\10\6\1\157\12\6\33\0\4\6"+
    "\2\0\13\6\4\0\3\6\1\160\17\6\33\0\2\6"+
    "\1\161\1\6\2\0\13\6\4\0\23\6\111\0\1\162"+
    "\2\0\1\163\102\0\1\164\10\0\1\165\71\0\1\166"+
    "\102\0\1\167\1\0\1\170\100\0\1\171\2\0\1\172"+
    "\77\0\1\173\3\0\1\174\76\0\1\175\4\0\1\176"+
    "\1\177\74\0\1\200\5\0\1\201\74\0\1\202\2\0"+
    "\1\203\3\0\1\204\73\0\1\205\102\0\1\206\10\0"+
    "\1\207\3\0\1\65\2\0\101\65\2\0\3\65\1\210"+
    "\74\65\5\0\4\6\2\0\1\211\12\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\2\6\1\212\10\6"+
    "\1\213\7\6\33\0\4\6\2\0\13\6\4\0\1\6"+
    "\1\214\21\6\33\0\4\6\2\0\4\6\1\215\6\6"+
    "\4\0\2\6\1\216\20\6\33\0\4\6\2\0\13\6"+
    "\4\0\13\6\1\217\7\6\33\0\4\6\2\0\4\6"+
    "\1\220\6\6\4\0\23\6\33\0\4\6\2\0\13\6"+
    "\4\0\1\221\22\6\33\0\4\6\2\0\13\6\4\0"+
    "\3\6\1\222\17\6\33\0\4\6\2\0\13\6\4\0"+
    "\1\223\22\6\33\0\4\6\2\0\4\6\1\224\6\6"+
    "\4\0\23\6\33\0\1\6\1\225\2\6\2\0\13\6"+
    "\4\0\23\6\26\0\1\104\2\0\100\104\1\105\1\0"+
    "\10\105\1\226\70\105\66\0\1\227\21\0\4\6\2\0"+
    "\13\6\4\0\3\6\1\230\17\6\33\0\4\6\2\0"+
    "\13\6\4\0\4\6\1\231\16\6\33\0\2\6\1\232"+
    "\1\6\2\0\13\6\4\0\23\6\42\0\1\233\6\0"+
    "\1\233\22\0\6\233\34\0\1\234\6\0\3\234\2\0"+
    "\1\234\1\0\1\234\1\0\1\234\10\0\2\234\6\0"+
    "\6\234\34\0\1\114\2\0\1\115\3\0\1\117\6\0"+
    "\1\117\22\0\6\117\34\0\4\6\2\0\4\6\1\235"+
    "\6\6\4\0\23\6\33\0\1\236\3\6\2\0\13\6"+
    "\4\0\23\6\33\0\4\6\2\0\13\6\4\0\2\6"+
    "\1\237\20\6\33\0\1\240\3\6\2\0\13\6\4\0"+
    "\23\6\33\0\3\6\1\241\2\0\13\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\1\6\1\242\21\6"+
    "\33\0\4\6\2\0\13\6\4\0\3\6\1\243\17\6"+
    "\42\0\1\244\6\0\1\244\22\0\6\244\34\0\1\130"+
    "\2\0\1\131\3\0\1\132\6\0\1\132\22\0\6\132"+
    "\55\0\1\245\54\0\1\134\2\0\100\134\30\137\1\140"+
    "\1\246\52\137\2\0\100\137\31\0\1\247\56\0\1\6"+
    "\1\250\2\6\2\0\13\6\4\0\23\6\33\0\4\6"+
    "\2\0\13\6\4\0\22\6\1\251\33\0\4\6\2\0"+
    "\13\6\4\0\1\252\22\6\33\0\4\6\2\0\13\6"+
    "\4\0\1\6\1\253\5\6\1\254\13\6\33\0\4\6"+
    "\2\0\13\6\4\0\13\6\1\255\7\6\33\0\4\6"+
    "\2\0\13\6\4\0\2\6\1\256\20\6\33\0\4\6"+
    "\2\0\1\257\12\6\4\0\23\6\33\0\4\6\2\0"+
    "\6\6\1\260\4\6\4\0\23\6\33\0\4\6\2\0"+
    "\13\6\4\0\2\6\1\261\20\6\33\0\4\6\2\0"+
    "\13\6\4\0\4\6\1\262\16\6\33\0\4\6\2\0"+
    "\13\6\4\0\1\263\22\6\33\0\4\6\2\0\1\264"+
    "\12\6\4\0\2\6\1\265\20\6\33\0\2\6\1\266"+
    "\1\6\2\0\13\6\4\0\23\6\33\0\2\6\1\267"+
    "\1\6\2\0\13\6\4\0\23\6\33\0\2\6\1\270"+
    "\1\6\2\0\4\6\1\271\6\6\4\0\23\6\33\0"+
    "\4\6\2\0\7\6\1\272\3\6\4\0\23\6\114\0"+
    "\1\273\102\0\1\274\102\0\1\275\10\0\1\276\3\0"+
    "\1\65\2\0\4\65\1\277\73\65\5\0\1\300\3\6"+
    "\2\0\13\6\4\0\23\6\33\0\1\301\3\6\2\0"+
    "\13\6\4\0\23\6\33\0\1\6\1\302\2\6\2\0"+
    "\13\6\4\0\23\6\33\0\4\6\2\0\13\6\4\0"+
    "\22\6\1\303\33\0\4\6\2\0\13\6\4\0\1\6"+
    "\1\304\21\6\33\0\1\305\3\6\2\0\13\6\4\0"+
    "\14\6\1\306\1\307\1\310\1\311\3\6\33\0\4\6"+
    "\2\0\4\6\1\312\6\6\4\0\23\6\33\0\4\6"+
    "\2\0\13\6\4\0\4\6\1\313\16\6\33\0\4\6"+
    "\2\0\13\6\4\0\4\6\1\314\16\6\33\0\4\6"+
    "\2\0\13\6\4\0\5\6\1\315\15\6\33\0\4\6"+
    "\2\0\13\6\4\0\22\6\1\316\33\0\4\6\2\0"+
    "\1\317\12\6\4\0\23\6\26\0\1\105\1\0\7\105"+
    "\1\320\1\226\70\105\5\0\4\6\2\0\13\6\4\0"+
    "\1\6\1\321\21\6\33\0\4\6\2\0\13\6\4\0"+
    "\3\6\1\322\17\6\33\0\4\6\2\0\13\6\4\0"+
    "\2\6\1\323\20\6\33\0\1\6\1\324\2\6\2\0"+
    "\13\6\4\0\23\6\33\0\4\6\2\0\13\6\4\0"+
    "\4\6\1\325\16\6\33\0\4\6\2\0\13\6\4\0"+
    "\3\6\1\326\17\6\33\0\4\6\2\0\13\6\4\0"+
    "\4\6\1\327\16\6\33\0\4\6\2\0\2\6\1\330"+
    "\10\6\4\0\23\6\26\0\1\247\1\0\27\247\1\331"+
    "\51\247\5\0\1\6\1\332\2\6\2\0\13\6\4\0"+
    "\23\6\33\0\1\333\3\6\2\0\13\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\2\6\1\334\20\6"+
    "\33\0\1\335\3\6\2\0\13\6\4\0\23\6\33\0"+
    "\1\336\3\6\2\0\13\6\4\0\23\6\33\0\4\6"+
    "\2\0\13\6\4\0\1\6\1\337\21\6\33\0\4\6"+
    "\2\0\13\6\4\0\2\6\1\340\20\6\33\0\4\6"+
    "\2\0\4\6\1\341\6\6\4\0\23\6\33\0\4\6"+
    "\2\0\1\342\12\6\4\0\23\6\33\0\4\6\2\0"+
    "\1\343\12\6\4\0\2\6\1\344\20\6\33\0\1\345"+
    "\3\6\2\0\13\6\4\0\2\6\1\346\20\6\33\0"+
    "\4\6\2\0\13\6\4\0\5\6\1\347\15\6\33\0"+
    "\4\6\2\0\6\6\1\350\4\6\4\0\23\6\33\0"+
    "\1\6\1\351\2\6\2\0\13\6\4\0\23\6\33\0"+
    "\4\6\2\0\13\6\4\0\6\6\1\352\14\6\33\0"+
    "\4\6\2\0\13\6\4\0\2\6\1\353\10\6\1\354"+
    "\7\6\33\0\2\6\1\355\1\6\2\0\13\6\4\0"+
    "\23\6\114\0\1\356\14\0\1\65\2\0\5\65\1\357"+
    "\72\65\5\0\4\6\2\0\13\6\4\0\3\6\1\360"+
    "\17\6\33\0\2\6\1\361\1\6\2\0\13\6\4\0"+
    "\23\6\33\0\4\6\2\0\13\6\4\0\2\6\1\362"+
    "\20\6\33\0\4\6\2\0\13\6\4\0\3\6\1\363"+
    "\17\6\33\0\4\6\2\0\13\6\4\0\16\6\1\364"+
    "\4\6\33\0\4\6\2\0\13\6\4\0\21\6\1\365"+
    "\1\6\33\0\4\6\2\0\13\6\4\0\20\6\1\366"+
    "\2\6\33\0\4\6\2\0\13\6\4\0\3\6\1\367"+
    "\17\6\33\0\4\6\2\0\13\6\4\0\2\6\1\370"+
    "\20\6\33\0\1\6\1\371\2\6\2\0\13\6\4\0"+
    "\23\6\33\0\4\6\2\0\6\6\1\372\4\6\4\0"+
    "\2\6\1\373\20\6\33\0\1\374\3\6\2\0\13\6"+
    "\4\0\23\6\33\0\4\6\2\0\13\6\4\0\5\6"+
    "\1\375\15\6\33\0\1\376\3\6\2\0\13\6\4\0"+
    "\23\6\33\0\4\6\2\0\13\6\4\0\5\6\1\377"+
    "\15\6\33\0\4\6\2\0\13\6\4\0\12\6\1\u0100"+
    "\10\6\33\0\4\6\2\0\13\6\4\0\3\6\1\u0101"+
    "\17\6\33\0\4\6\2\0\13\6\4\0\1\6\1\u0102"+
    "\21\6\33\0\1\6\1\u0103\2\6\2\0\13\6\4\0"+
    "\23\6\26\0\1\247\1\0\27\247\1\u0104\51\247\5\0"+
    "\4\6\2\0\1\u0105\12\6\4\0\23\6\33\0\4\6"+
    "\2\0\13\6\4\0\14\6\1\u0106\1\u0107\1\u0108\1\u0109"+
    "\3\6\33\0\4\6\2\0\6\6\1\u010a\4\6\4\0"+
    "\23\6\33\0\4\6\2\0\13\6\4\0\3\6\1\u010b"+
    "\17\6\33\0\4\6\2\0\13\6\4\0\3\6\1\u010c"+
    "\17\6\33\0\4\6\2\0\1\u010d\12\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\2\6\1\u010e\20\6"+
    "\33\0\2\6\1\u010f\1\6\2\0\13\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\10\6\1\u0110\12\6"+
    "\33\0\1\u0111\3\6\2\0\13\6\4\0\23\6\33\0"+
    "\4\6\2\0\13\6\4\0\4\6\1\u0112\16\6\33\0"+
    "\1\u0113\3\6\2\0\13\6\4\0\23\6\33\0\1\u0114"+
    "\3\6\2\0\13\6\4\0\23\6\33\0\4\6\2\0"+
    "\13\6\4\0\1\u0115\22\6\26\0\1\357\2\u0116\1\357"+
    "\1\65\76\357\5\0\4\6\2\0\13\6\4\0\1\u0117"+
    "\22\6\33\0\4\6\2\0\13\6\4\0\5\6\1\u0118"+
    "\15\6\33\0\3\6\1\u0119\2\0\13\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\2\6\1\u011a\20\6"+
    "\33\0\1\u011b\3\6\2\0\13\6\4\0\23\6\33\0"+
    "\2\6\1\u011c\1\6\2\0\13\6\4\0\23\6\33\0"+
    "\4\6\2\0\13\6\4\0\2\6\1\u011d\20\6\33\0"+
    "\4\6\2\0\6\6\1\u011e\4\6\4\0\23\6\33\0"+
    "\4\6\2\0\13\6\4\0\10\6\1\u011f\12\6\33\0"+
    "\2\6\1\u0120\1\6\2\0\13\6\4\0\23\6\33\0"+
    "\1\6\1\u0121\2\6\2\0\13\6\4\0\23\6\33\0"+
    "\1\u0122\3\6\2\0\13\6\4\0\23\6\26\0\1\247"+
    "\1\0\27\247\1\u0123\51\247\5\0\4\6\2\0\13\6"+
    "\4\0\13\6\1\u0124\7\6\33\0\4\6\2\0\13\6"+
    "\4\0\16\6\1\u0125\4\6\33\0\4\6\2\0\13\6"+
    "\4\0\21\6\1\u0126\1\6\33\0\4\6\2\0\13\6"+
    "\4\0\20\6\1\u0127\2\6\33\0\1\u0128\3\6\2\0"+
    "\13\6\4\0\23\6\33\0\4\6\2\0\13\6\4\0"+
    "\1\u0129\22\6\33\0\4\6\2\0\13\6\4\0\4\6"+
    "\1\u012a\16\6\33\0\4\6\2\0\13\6\4\0\1\u012b"+
    "\22\6\33\0\4\6\2\0\13\6\4\0\2\6\1\u012c"+
    "\20\6\33\0\4\6\2\0\13\6\4\0\5\6\1\u012d"+
    "\15\6\33\0\4\6\2\0\13\6\4\0\3\6\1\u012e"+
    "\17\6\26\0\4\u0116\1\0\76\u0116\5\0\4\6\2\0"+
    "\13\6\4\0\4\6\1\u012f\16\6\33\0\2\6\1\u0130"+
    "\1\6\2\0\13\6\4\0\23\6\33\0\4\6\2\0"+
    "\13\6\4\0\4\6\1\u0131\16\6\33\0\3\6\1\u0132"+
    "\2\0\13\6\4\0\23\6\33\0\4\6\2\0\4\6"+
    "\1\u0133\6\6\4\0\23\6\33\0\4\6\2\0\6\6"+
    "\1\u0134\4\6\4\0\23\6\33\0\4\6\2\0\13\6"+
    "\4\0\2\6\1\u0135\20\6\33\0\4\6\2\0\13\6"+
    "\4\0\4\6\1\u0136\16\6\33\0\3\6\1\u0137\2\0"+
    "\13\6\4\0\23\6\33\0\4\6\2\0\13\6\4\0"+
    "\5\6\1\u0138\15\6\33\0\4\6\2\0\13\6\4\0"+
    "\1\6\1\u0139\21\6\33\0\1\u013a\3\6\2\0\13\6"+
    "\4\0\23\6\33\0\4\6\2\0\13\6\4\0\2\6"+
    "\1\u013b\20\6\33\0\4\6\2\0\13\6\4\0\2\6"+
    "\1\u013c\20\6\33\0\1\6\1\u013d\2\6\2\0\13\6"+
    "\4\0\23\6\33\0\4\6\2\0\13\6\4\0\2\6"+
    "\1\u013e\20\6\33\0\4\6\2\0\13\6\4\0\5\6"+
    "\1\u013f\15\6\33\0\4\6\2\0\13\6\4\0\1\u0140"+
    "\22\6\33\0\1\u0141\3\6\2\0\13\6\4\0\23\6"+
    "\33\0\4\6\2\0\13\6\4\0\5\6\1\u0142\15\6"+
    "\33\0\4\6\2\0\13\6\4\0\2\6\1\u0143\20\6"+
    "\33\0\1\u0144\3\6\2\0\13\6\4\0\23\6\33\0"+
    "\1\u0145\3\6\2\0\13\6\4\0\23\6\33\0\4\6"+
    "\2\0\13\6\4\0\7\6\1\u0146\13\6\33\0\1\u0147"+
    "\3\6\2\0\13\6\4\0\23\6\33\0\1\u0148\3\6"+
    "\2\0\13\6\4\0\23\6\33\0\4\6\2\0\6\6"+
    "\1\u0149\4\6\4\0\23\6\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15075];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\6\11\1\1\2\11\12\1\3\11"+
    "\20\1\1\0\1\11\1\1\1\11\3\1\1\0\1\11"+
    "\1\0\11\1\1\0\1\11\1\1\2\0\1\11\3\0"+
    "\21\1\15\11\1\1\4\11\1\1\2\11\17\1\1\0"+
    "\1\11\15\1\2\11\1\0\23\1\3\11\33\1\1\0"+
    "\24\1\1\11\25\1\1\0\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AngelScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AngelScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 131: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 132: break;
          case 3: 
            { return T_PRE_COMMENT;
            } 
            // fall through
          case 133: break;
          case 4: 
            { return T_IDENT;
            } 
            // fall through
          case 134: break;
          case 5: 
            { return T_QUOTIENT;
            } 
            // fall through
          case 135: break;
          case 6: 
            { return T_MUL;
            } 
            // fall through
          case 136: break;
          case 7: 
            { return T_NUMB;
            } 
            // fall through
          case 137: break;
          case 8: 
            { return T_DOT;
            } 
            // fall through
          case 138: break;
          case 9: 
            { return T_LBRACE;
            } 
            // fall through
          case 139: break;
          case 10: 
            { return T_RBRACE;
            } 
            // fall through
          case 140: break;
          case 11: 
            { return T_LBRACK;
            } 
            // fall through
          case 141: break;
          case 12: 
            { return T_RBRACK;
            } 
            // fall through
          case 142: break;
          case 13: 
            { return T_LPAREN;
            } 
            // fall through
          case 143: break;
          case 14: 
            { return T_RPAREN;
            } 
            // fall through
          case 144: break;
          case 15: 
            { return T_COLON;
            } 
            // fall through
          case 145: break;
          case 16: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 146: break;
          case 17: 
            { return T_COMMA;
            } 
            // fall through
          case 147: break;
          case 18: 
            { return T_ASSIGN;
            } 
            // fall through
          case 148: break;
          case 19: 
            { return T_NOT;
            } 
            // fall through
          case 149: break;
          case 20: 
            { return T_PLUS;
            } 
            // fall through
          case 150: break;
          case 21: 
            { return T_MINUS;
            } 
            // fall through
          case 151: break;
          case 22: 
            { return T_BIT_OR;
            } 
            // fall through
          case 152: break;
          case 23: 
            { return T_BIT_AND;
            } 
            // fall through
          case 153: break;
          case 24: 
            { return T_BIT_XOR;
            } 
            // fall through
          case 154: break;
          case 25: 
            { return T_LESS;
            } 
            // fall through
          case 155: break;
          case 26: 
            { return T_REMAINDER;
            } 
            // fall through
          case 156: break;
          case 27: 
            { return T_GREATER;
            } 
            // fall through
          case 157: break;
          case 28: 
            { return T_QUEST;
            } 
            // fall through
          case 158: break;
          case 29: 
            { return T_TILDE;
            } 
            // fall through
          case 159: break;
          case 30: 
            { return T_AT;
            } 
            // fall through
          case 160: break;
          case 31: 
            { return T_IF;
            } 
            // fall through
          case 161: break;
          case 32: 
            { return T_IS;
            } 
            // fall through
          case 162: break;
          case 33: 
            { return T_IN;
            } 
            // fall through
          case 163: break;
          case 34: 
            { return T_LINE_COMMENT;
            } 
            // fall through
          case 164: break;
          case 35: 
            { return T_QUOTIENT_ASSIGN;
            } 
            // fall through
          case 165: break;
          case 36: 
            { return T_EXPONENT;
            } 
            // fall through
          case 166: break;
          case 37: 
            { return T_MUL_ASSIGN;
            } 
            // fall through
          case 167: break;
          case 38: 
            { return T_OR_TEXT;
            } 
            // fall through
          case 168: break;
          case 39: 
            { return T_DO;
            } 
            // fall through
          case 169: break;
          case 40: 
            { return T_NUMB_2;
            } 
            // fall through
          case 170: break;
          case 41: 
            { return T_STRING_SINGLE;
            } 
            // fall through
          case 171: break;
          case 42: 
            { return T_STRING_DOUBLE;
            } 
            // fall through
          case 172: break;
          case 43: 
            { return T_COLONCOLON;
            } 
            // fall through
          case 173: break;
          case 44: 
            { return T_VAR_ASSIGN;
            } 
            // fall through
          case 174: break;
          case 45: 
            { return T_EQ;
            } 
            // fall through
          case 175: break;
          case 46: 
            { return T_ARROW;
            } 
            // fall through
          case 176: break;
          case 47: 
            { return T_NOT_EQ;
            } 
            // fall through
          case 177: break;
          case 48: 
            { return T_PLUS_ASSIGN;
            } 
            // fall through
          case 178: break;
          case 49: 
            { return T_PLUS_PLUS;
            } 
            // fall through
          case 179: break;
          case 50: 
            { return T_MINUS_ASSIGN;
            } 
            // fall through
          case 180: break;
          case 51: 
            { return T_MINUS_MINUS;
            } 
            // fall through
          case 181: break;
          case 52: 
            { return T_BIT_OR_ASSIGN;
            } 
            // fall through
          case 182: break;
          case 53: 
            { return T_COND_OR;
            } 
            // fall through
          case 183: break;
          case 54: 
            { return T_BIT_AND_ASSIGN;
            } 
            // fall through
          case 184: break;
          case 55: 
            { return T_COND_AND;
            } 
            // fall through
          case 185: break;
          case 56: 
            { return T_BIT_CLEAR;
            } 
            // fall through
          case 186: break;
          case 57: 
            { return T_BIT_XOR_ASSIGN;
            } 
            // fall through
          case 187: break;
          case 58: 
            { return T_LOGIC_XOR;
            } 
            // fall through
          case 188: break;
          case 59: 
            { return T_LESS_OR_EQUAL;
            } 
            // fall through
          case 189: break;
          case 60: 
            { return T_SEND_CHANNEL;
            } 
            // fall through
          case 190: break;
          case 61: 
            { return T_SHIFT_LEFT;
            } 
            // fall through
          case 191: break;
          case 62: 
            { return T_REMAINDER_ASSIGN;
            } 
            // fall through
          case 192: break;
          case 63: 
            { return T_GREATER_OR_EQUAL;
            } 
            // fall through
          case 193: break;
          case 64: 
            { return T_SHIFT_RIGHT;
            } 
            // fall through
          case 194: break;
          case 65: 
            { return T_INT;
            } 
            // fall through
          case 195: break;
          case 66: 
            { return T_FOR;
            } 
            // fall through
          case 196: break;
          case 67: 
            { return T_EXP_ASSIGN;
            } 
            // fall through
          case 197: break;
          case 68: 
            { return T_BITS;
            } 
            // fall through
          case 198: break;
          case 69: 
            { return T_OUT;
            } 
            // fall through
          case 199: break;
          case 70: 
            { return T_XOR_TEST;
            } 
            // fall through
          case 200: break;
          case 71: 
            { return T_TRIPLE_DOT;
            } 
            // fall through
          case 201: break;
          case 72: 
            { return T_TRY;
            } 
            // fall through
          case 202: break;
          case 73: 
            { return T_AND_TEXT;
            } 
            // fall through
          case 203: break;
          case 74: 
            { return T_BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 204: break;
          case 75: 
            { return T_SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 205: break;
          case 76: 
            { return T_SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 206: break;
          case 77: 
            { return T_SHIFT_SHIFT_RIGHT;
            } 
            // fall through
          case 207: break;
          case 78: 
            { return T_ELSE;
            } 
            // fall through
          case 208: break;
          case 79: 
            { return T_ENUM;
            } 
            // fall through
          case 209: break;
          case 80: 
            { return T_INT8;
            } 
            // fall through
          case 210: break;
          case 81: 
            { return T_FROM;
            } 
            // fall through
          case 211: break;
          case 82: 
            { return T_BLOCK_COMMENT;
            } 
            // fall through
          case 212: break;
          case 83: 
            { return T_BOOL;
            } 
            // fall through
          case 213: break;
          case 84: 
            { return T_NULL;
            } 
            // fall through
          case 214: break;
          case 85: 
            { return T_UINT;
            } 
            // fall through
          case 215: break;
          case 86: 
            { return T_TRUE;
            } 
            // fall through
          case 216: break;
          case 87: 
            { return T_AUTO;
            } 
            // fall through
          case 217: break;
          case 88: 
            { return T_CASE;
            } 
            // fall through
          case 218: break;
          case 89: 
            { return T_CAST;
            } 
            // fall through
          case 219: break;
          case 90: 
            { return T_VOID;
            } 
            // fall through
          case 220: break;
          case 91: 
            { return T_SHIFT_SHIFT_RIGHT_ASSIN;
            } 
            // fall through
          case 221: break;
          case 92: 
            { return T_ELIF_COMMENT;
            } 
            // fall through
          case 222: break;
          case 93: 
            { return T_INOUT;
            } 
            // fall through
          case 223: break;
          case 94: 
            { return T_INT16;
            } 
            // fall through
          case 224: break;
          case 95: 
            { return T_INT64;
            } 
            // fall through
          case 225: break;
          case 96: 
            { return T_INT32;
            } 
            // fall through
          case 226: break;
          case 97: 
            { return T_FLOAT;
            } 
            // fall through
          case 227: break;
          case 98: 
            { return T_FINAL;
            } 
            // fall through
          case 228: break;
          case 99: 
            { return T_FALSE;
            } 
            // fall through
          case 229: break;
          case 100: 
            { return T_BREAK;
            } 
            // fall through
          case 230: break;
          case 101: 
            { return T_UINT8;
            } 
            // fall through
          case 231: break;
          case 102: 
            { return T_CLASS;
            } 
            // fall through
          case 232: break;
          case 103: 
            { return T_CONST;
            } 
            // fall through
          case 233: break;
          case 104: 
            { return T_CATCH;
            } 
            // fall through
          case 234: break;
          case 105: 
            { return T_WHILE;
            } 
            // fall through
          case 235: break;
          case 106: 
            { return T_MIXIN;
            } 
            // fall through
          case 236: break;
          case 107: 
            { return T_IMPORT;
            } 
            // fall through
          case 237: break;
          case 108: 
            { return T_STRUCT;
            } 
            // fall through
          case 238: break;
          case 109: 
            { return T_SHARED;
            } 
            // fall through
          case 239: break;
          case 110: 
            { return T_SWITCH;
            } 
            // fall through
          case 240: break;
          case 111: 
            { return T_DOUBLE;
            } 
            // fall through
          case 241: break;
          case 112: 
            { return T_STRING_BLOCK;
            } 
            // fall through
          case 242: break;
          case 113: 
            { return T_UINT16;
            } 
            // fall through
          case 243: break;
          case 114: 
            { return T_UINT64;
            } 
            // fall through
          case 244: break;
          case 115: 
            { return T_UINT32;
            } 
            // fall through
          case 245: break;
          case 116: 
            { return T_RETURN;
            } 
            // fall through
          case 246: break;
          case 117: 
            { return T_FUNCDEF;
            } 
            // fall through
          case 247: break;
          case 118: 
            { return T_DEFAULT;
            } 
            // fall through
          case 248: break;
          case 119: 
            { return T_TYPEDEF;
            } 
            // fall through
          case 249: break;
          case 120: 
            { return T_PRIVATE;
            } 
            // fall through
          case 250: break;
          case 121: 
            { return T_EXTERNAL;
            } 
            // fall through
          case 251: break;
          case 122: 
            { return T_EXPLICIT;
            } 
            // fall through
          case 252: break;
          case 123: 
            { return T_FUNCTION;
            } 
            // fall through
          case 253: break;
          case 124: 
            { return T_OVERRIDE;
            } 
            // fall through
          case 254: break;
          case 125: 
            { return T_ABSTRACT;
            } 
            // fall through
          case 255: break;
          case 126: 
            { return T_CONTINUE;
            } 
            // fall through
          case 256: break;
          case 127: 
            { return T_PROPERTY;
            } 
            // fall through
          case 257: break;
          case 128: 
            { return T_INTERFACE;
            } 
            // fall through
          case 258: break;
          case 129: 
            { return T_NAMESPACE;
            } 
            // fall through
          case 259: break;
          case 130: 
            { return T_PROTECTED;
            } 
            // fall through
          case 260: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
